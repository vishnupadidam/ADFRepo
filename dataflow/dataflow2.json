{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Sourcefiles",
						"type": "DatasetReference"
					},
					"name": "sourcefiles",
					"description": "Sou"
				},
				{
					"dataset": {
						"referenceName": "Previousdeltafile",
						"type": "DatasetReference"
					},
					"name": "PreviousDelta",
					"description": "pre"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "Todaydeltafile"
				}
			],
			"transformations": [
				{
					"name": "SderivedColumn"
				},
				{
					"name": "DderivedColumn2"
				},
				{
					"name": "exists1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcefiles",
				"source(output(",
				"          Id as string,",
				"          name as string,",
				"          city as string,",
				"          age as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PreviousDelta",
				"source(output(",
				"          empid as integer,",
				"          name as string,",
				"          title as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"sourcefiles derive(Shashcol = toBinary(sha2(256, 'Id'+'name'))) ~> SderivedColumn",
				"PreviousDelta derive(Dhashcol = toBinary(sha2(256,'Id'+'name'))) ~> DderivedColumn2",
				"SderivedColumn, DderivedColumn2 exists(Shashcol==Dhashcol,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"exists1 filter(ERROR_FUNCTION('')) ~> filter1",
				"source1 derive(SQLhash = toBinary(sha2(256,'empid'))) ~> derivedColumn1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Todaydeltafile"
			]
		}
	}
}